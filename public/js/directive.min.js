//归口占比
app.directive("centralizedRadar", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {
                //雷达图
                require(
                    [
                        'echarts',
                        'echarts/chart/radar'
                    ],
                    function (ec) {
                        scope.$watch('centralizedRadar', function(newValue, oldValue, scope) {
                                if(newValue) {
                                    ec.init(document.getElementById('centralized__radar')).setOption(getOption(newValue));
                                }
                        });
                    }
                );

                function getOption(newValue){
                    var temp=newValue;
                    var types=[];
                    var typeValues=[];
                    var valueCount=0;
                    var maxValue=0;
                    for(var i=0;i<temp.length;i++){
                        types.push(temp[i].type);
                        typeValues.push(temp[i].value);
                        valueCount=parseInt(valueCount)+parseInt(temp[i].value);
                        if(maxValue<temp[i].value){
                            maxValue=temp[i].value;
                        }
                    }
                    var option = {
                        calculable : false,
                        polar : [
                            {
                                indicator:function(){
                                    var texts=[];
                                    for(var i=0;i<temp.length;i++){
                                        var dom={text:'▉  '+temp[i].type,max:maxValue*1.2};
                                        texts.push(dom);
                                    }
                                    return texts;
                                }(),
                                //radius:130,
                                name : {
                                    show:true,
                                    textStyle: {color:'#ffffff',fontSize:'16'}
                                },
                                splitLine:{lineStyle:{color:'#7ab9c0'}},
                                splitArea:{areaStyle:{color:'rgba(255,255,255,0)'}},
                                axisLine:{show:false},
                                type:'polygon'
                            }
                        ],

                        series : [
                            {
                                name: '归口占比',
                                type: 'radar',
                                itemStyle: {
                                    normal: {
                                        areaStyle: {
                                            color:'rgba(18,209,222,.8)',
                                            type: 'default'
                                        },
                                        color:'#ADF3FB',
                                        borderColor:'#adf3fb',
                                        label: {
                                            show: true,
                                            position:  'top',
                                            formatter:function(params, ticket, callback){
                                                //console.log(Math.round(params.value / valueCount * 10000) / 100.00 + "%");
                                                return Math.round(params.value / valueCount * 10000) / 100.00 + "%"
                                            },
                                            textStyle:{
                                                color:'#7fc79a',
                                                fontSize:'16',
                                                fontWeight:'700'
                                            }
                                        }
                                    }
                                },
                                symbol:'emptyCircle',
                                symbolSize:1|2,
                                data : [
                                    {
                                        value : typeValues
                                    }
                                ]
                            }
                        ]
                    };
                    return option;
                }
            }
        };
    }
]);

app.directive("centralizedBar", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {
                //柱状图
                require(
                    [
                        'echarts',
                        'echarts/chart/bar'
                    ],
                    function (ec) {
                        scope.$watch('centralizedRadar', function(newValue, oldValue, scope) {
                                if(newValue) {
                                    ec.init(document.getElementById('centralized__bar')).setOption(getOption(newValue));
                                }
                        });
                    }
                );

                function getOption(newValue){
                    var temp=newValue;
                    var types=[];
                    var typeValues=[];
                    for(var i=0;i<temp.length;i++){
                        types.push(temp[i].type);
                        typeValues.push(temp[i].value);
                    }
                    var option = {
                        xAxis : [
                            {
                                splitLine:{show:false},
                                axisLine:{
                                    lineStyle:{
                                        color:'#ffffff',
                                        width:'1'
                                    }
                                },
                                axisLabel:{
                                    textStyle:{
                                        color:'#ffffff'
                                    }
                                },
                                type : 'category',
                                data : types
                            }
                        ],
                        grid:{
                            borderWidth:'0'
                        },
                        yAxis : [
                            {

                                splitLine:{show:false},
                                type : 'value',
                                axisLabel : {
                                    show : true,
                                    textStyle : {
                                        color : '#ffffff'
                                    }
                                },
                                axisLine:{
                                    lineStyle:{
                                        color:'#ffffff',
                                        width:'1'
                                    }
                                }

                            }
                        ],
                        series : [
                            {
                                "name":"故障次数（个）",
                                "type":"bar",
                                barWidth:'25',
                                itemStyle:{
                                    normal: {
                                        label: {
                                            show: true,
                                            position: 'top'
                                        },
                                        color: function(params) {
                                            // build a color map as your need.
                                            var colorList = [
                                                '#0e97cb','#9fdff8','#f6e5a0','#f3b6a4','#f66165'
                                            ];
                                            return colorList[params.dataIndex]
                                        }
                                    }
                                },
                                "data":typeValues

                            }
                        ]
                    };
                    return option;
                }
            }
        };
    }
]);

app.directive("clickFocus", [function() {
    return {
        restrict: 'A',
        compile: function(tEle, tAttrs, transcludeFn) {
            tEle.on('click', function() {
                tEle.next()[0].focus();

            });
        }
    };
}]);
app.directive("figureMove", ['timer', function(timer) {
    return {
        restrict: 'A',
        link: function(scope, tEle, tAttrs, transcludeFn) {
            scope.$watch(tAttrs.figureMove, function(newValue, oldValue, scope) {
                if (angular.isDefined(newValue)) {
                    if (newValue < 1) {
                        tEle[0].style.webkitTransition = "none 0.3s linear";
                        tEle[0].style.left = '17px';
                    } else {
                        tEle[0].style.webkitTransition = "all 0.3s linear";
                        tEle[0].style.left = (218 * parseInt(newValue, 10) + 17) + 'px';
                    }
                }
            });
        }
    };
}]);
app.directive("flipCards", ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        link: function(scope, tEle, tAttrs, transcludeFn) {
            var sumArr = [];
            var nTarget = [];


            scope.$watch(tAttrs.flipCards, function(newValue, oldValue, scope) {
                newValue = newValue + '';
                var delay = 1;
                for (var i = newValue.length - 1; i >= 0; i--) {
                    var index = newValue.length - 1 - i;
                    if (angular.isDefined(sumArr[index])) {
                        if (sumArr[index] != newValue[i]) {
                            sumArr[index] = newValue[i];
                            changeItem(nTarget[index], newValue[i], delay++);
                        }
                    } else {
                        sumArr[index] = newValue[i];
                        changeItem(nTarget[index], newValue[i], delay++);
                    }
                }
            });

            for (var i = 0; i < 10; i++) {
                var level = '';

                if (0 === i) {
                    tEle.prepend('<div class="layout__sum--unit">条</div>');
                } else if (0 === i % 3) {
                    tEle.prepend('<div class="layout__sum--comma">,</div>');
                }
                if (i > 7) {
                    level = 'high';
                } else if (i > 5) {
                    level = 'middle';
                } else if (i > 3) {
                    level = 'low';
                }
                nTarget[i] = initItem(0, level);
                tEle.prepend(nTarget[i]);
                var top = nTarget[i][0].getElementsByClassName('layout__sum--top')[0];
                top.addEventListener("transitionend", transitionEndFun);
            }

            function transitionEndFun(e) {
                var top = this;
                var bottom = top.nextSibling;
                var nTop = bottom.nextSibling;
                var nBottom = nTop.nextSibling;
                var nowNum = top.getElementsByClassName('text')[0].innerHTML;
                var nextNum = top.nextNum;

                top.getElementsByClassName('text')[0].innerHTML = nextNum;
                bottom.getElementsByClassName('text')[0].innerHTML = nextNum;

                top.style.webkitTransition = "none 0s";
                top.style.webkitTransform = "rotateX(0deg)";

                nBottom.style.webkitTransition = "none 0s";
                nBottom.style.webkitTransform = "rotateX(180deg)";
                nBottom.style.zIndex = "11";
                changeItem(angular.element(top.parentNode), top.max);
            }


            function initItem(n, level) {
                return angular.element('<div class="layout__sum--item ' + level + '">' +
                    '<div class="layout__sum--top">' +
                    '<div class="background"></div>' +
                    '<div class="text">' + n + '</div>' +
                    '</div>' +
                    '<div class="layout__sum--bottom">' +
                    '<div class="background"></div>' +
                    '<div class="text">' + n + '</div>' +
                    '</div>' +
                    '<div class="layout__sum--nTop">' +
                    '<div class="background"></div>' +
                    '<div class="text"></div>' +
                    '</div>' +
                    '<div class="layout__sum--nBottom">' +
                    '<div class="background"></div>' +
                    '<div class="text"></div>' +
                    '</div></div>');
            }

            function changeItem(target, n, delay) {
                var top = target[0].getElementsByClassName('layout__sum--top')[0];
                var bottom = target[0].getElementsByClassName('layout__sum--bottom')[0];
                var nTop = target[0].getElementsByClassName('layout__sum--nTop')[0];
                var nBottom = target[0].getElementsByClassName('layout__sum--nBottom')[0];
                var nowNum = top.getElementsByClassName('text')[0].innerHTML;
                var nextNum = nowNum - 0 + 1;
                if (nowNum == n) return false;

                if (nextNum == 10) nextNum = 0;

                delay = 0;
                top.max = n;
                $timeout(function() {

                    nTop.getElementsByClassName('text')[0].innerHTML = nextNum;
                    nBottom.getElementsByClassName('text')[0].innerHTML = nextNum;
                    // top.className += ' flip';
                    // nBottom.className += ' flip';
                    top.style.webkitTransition = "all 0.4s cubic-bezier(0.5,0.1,0.5,0.1)";
                    top.style.webkitTransform = "rotateX(-180deg)";

                    nBottom.style.webkitTransition = "all 0.4s cubic-bezier(0.5,0.1,0.5,0.1)";
                    nBottom.style.webkitTransform = "rotateX(0deg)";
                    nBottom.style.zIndex = "12";

                    top.nextNum = nextNum;
                }, 1);
            }
        }
    };
}]);
app.directive("grabData", ['$http', 'timer', 'M_API',
    function($http, timer, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {
                //console.log(scope.grabList);
                var t= 0;
                scope.$watch('grabList', function(newValue, oldValue, scope) {
                    //console.log(newValue);
                    if(newValue){
                        for(var i=0;i<16;i++){
                            scope.lists.push(newValue[i]);
                            t++;
                        }
                        //console.log(scope.lists);
                        var str='';
                        for(var j=0;j<scope.lists.length;j++){
                            str+='<div class="figure__Item figure__Item--active grab_d">';
                            str+='<span class="grad__Item--time"><span class="figure__number">'+scope.lists[j].time+'</span></span>';
                            str+='<span class="figure__Item--content grad__Item--cont">'+scope.lists[j].title+'</span>';
                            //str+='<span class="figure__Item--browse">浏：<span class="figure__number">'+scope.lists[j].views+'</span></span>';
                            //str+='<span class="figure__Item--reply">回：<span class="figure__number">'+scope.lists[j].replyAmount+'</span></span>';
                            str+='<span class="figure__Item--type figure__Item--type--stability grad__Item--name">'+scope.lists[j].name+'</span>';
                            str+='</div>';
                        }
                        tEle.html(str);
                        function updateList(){
                            var temp='';
                            temp+='<div class="figure__Item figure__Item--active  grab_d">';
                            temp+='<span class="grad__Item--time"><span class="figure__number">'+newValue[t].time+'</span></span>';
                            temp+='<span class="figure__Item--content grad__Item--cont">'+newValue[t].title+'</span>';
                            //temp+='<span class="figure__Item--browse">浏：<span class="figure__number">'+newValue[t].views+'</span></span>';
                            //temp+='<span class="figure__Item--reply">回：<span class="figure__number">'+newValue[t].replyAmount+'</span></span>';
                            temp+='<span class="figure__Item--type figure__Item--type--stability grad__Item--name">'+newValue[t].name+'</span>';
                            temp+='</div>';
                            tEle.append(temp);
                            if(t>=newValue.length-1){
                                t=0;
                            }else{
                                t++;
                            }
                            var dom=tEle[0].getElementsByClassName('grab_d')[0];
                            dom.style.marginTop='-43px';
                            dom.addEventListener("transitionend", function(){
                                tEle[0].removeChild(this);
                                updateList();
                            });

                        }
                        timer(function() {
                            updateList();
                        },1000, 'grabUpdate');
                    }
                });
            }
        };
    }
]);


app.directive("grabMap", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {


                //数据抓取地图
                require(
                    [
                        'echarts',
                        'echarts/chart/map'
                    ],
                    function (ec) {
                        scope.$watch('grab_map_data', function(newValue, oldValue, scope) {
                            if(newValue){
                                scope.grab_map_data_line=[];
                                for(var i=0;i<newValue.length;i++){
                                    scope.grab_map_data_line.push([
                                        {name:'成都'},newValue[i]
                                    ])
                                }
                                var m=ec.init(document.getElementById('grab_content--map'));
                                m.setOption(getOption(newValue,scope.grab_map_data_line));

                            }
                        });
                    }
                );

                function getOption(newValue,line){
                    //console.log(newValue,line);
                    var option = {
                        //backgroundColor: '#1b1b1b',
                        color: ['gold','aqua','lime'],
                        //title : {
                        //    text: '模拟迁徙',
                        //    subtext:'数据纯属虚构',
                        //    x:'center',
                        //    textStyle : {
                        //        color: '#fff'
                        //    }
                        //},
                        tooltip : {
                            trigger: 'item',
                            formatter: '{b}'
                        },
                        //legend: {
                        //    orient: 'vertical',
                        //    x:'left',
                        //    data:['北京 Top10', '上海 Top10', '广州 Top10'],
                        //    selectedMode: 'single',
                        //    selected:{
                        //        '上海 Top10' : false,
                        //        '广州 Top10' : false
                        //    },
                        //    textStyle : {
                        //        color: '#fff'
                        //    }
                        //},
                        toolbox: {
                            show : false,
                            orient : 'vertical',
                            x: 'right',
                            y: 'center',
                            feature : {
                                mark : {show: true},
                                dataView : {show: true, readOnly: false},
                                restore : {show: true},
                                saveAsImage : {show: true}
                            }
                        },
                        dataRange: {
                            show:false,
                            min : 100,
                            max : 20000,
                            calculable : false,
                            color: ['#ff3333', 'orange', 'yellow','lime','aqua'],
                            textStyle:{
                                color:'rgba(0,0,0,0)'
                            }
                        },
                        series : [
                            {
                                name: '全国',
                                type: 'map',
                                roam: false,
                                hoverable: false,
                                mapType: 'china',
                                itemStyle:{
                                    normal:{
                                        borderColor:'rgba(100,149,237,1)',
                                        borderWidth:0.5,
                                        areaStyle:{
                                            color: '#1b1b1b'
                                        }
                                    }
                                },
                                data:[],
                                markLine : {
                                    smooth:true,
                                    symbol: ['none', 'circle'],
                                    symbolSize : 1,
                                    itemStyle : {
                                        normal: {
                                            color:'#fff',
                                            borderWidth:1,
                                            borderColor:'rgba(30,144,255,0.5)'
                                        }
                                    },
                                    data : [
                                        [{name:'北京'},{name:'包头'}],
                                        [{name:'北京'},{name:'北海'}],
                                        [{name:'北京'},{name:'广州'}],
                                        [{name:'北京'},{name:'郑州'}],
                                        [{name:'北京'},{name:'长春'}],
                                        [{name:'北京'},{name:'长治'}],
                                        [{name:'北京'},{name:'重庆'}],
                                        [{name:'北京'},{name:'长沙'}],
                                        [{name:'北京'},{name:'成都'}],
                                        [{name:'北京'},{name:'常州'}],
                                        [{name:'北京'},{name:'丹东'}],
                                        [{name:'北京'},{name:'大连'}],
                                        [{name:'北京'},{name:'东营'}],
                                        [{name:'北京'},{name:'延安'}],
                                        [{name:'北京'},{name:'福州'}],
                                        [{name:'北京'},{name:'海口'}],
                                        [{name:'北京'},{name:'呼和浩特'}],
                                        [{name:'北京'},{name:'合肥'}],
                                        [{name:'北京'},{name:'杭州'}],
                                        [{name:'北京'},{name:'哈尔滨'}],
                                        [{name:'北京'},{name:'舟山'}],
                                        [{name:'北京'},{name:'银川'}],
                                        [{name:'北京'},{name:'衢州'}],
                                        [{name:'北京'},{name:'南昌'}],
                                        [{name:'北京'},{name:'昆明'}],
                                        [{name:'北京'},{name:'贵阳'}],
                                        [{name:'北京'},{name:'兰州'}],
                                        [{name:'北京'},{name:'拉萨'}],
                                        [{name:'北京'},{name:'连云港'}],
                                        [{name:'北京'},{name:'临沂'}],
                                        [{name:'北京'},{name:'柳州'}],
                                        [{name:'北京'},{name:'宁波'}],
                                        [{name:'北京'},{name:'南京'}],
                                        [{name:'北京'},{name:'南宁'}],
                                        [{name:'北京'},{name:'南通'}],
                                        [{name:'北京'},{name:'上海'}],
                                        [{name:'北京'},{name:'沈阳'}],
                                        [{name:'北京'},{name:'西安'}],
                                        [{name:'北京'},{name:'汕头'}],
                                        [{name:'北京'},{name:'深圳'}],
                                        [{name:'北京'},{name:'青岛'}],
                                        [{name:'北京'},{name:'济南'}],
                                        [{name:'北京'},{name:'太原'}],
                                        [{name:'北京'},{name:'乌鲁木齐'}],
                                        [{name:'北京'},{name:'潍坊'}],
                                        [{name:'北京'},{name:'威海'}],
                                        [{name:'北京'},{name:'温州'}],
                                        [{name:'北京'},{name:'武汉'}],
                                        [{name:'北京'},{name:'无锡'}],
                                        [{name:'北京'},{name:'厦门'}],
                                        [{name:'北京'},{name:'西宁'}],
                                        [{name:'北京'},{name:'徐州'}],
                                        [{name:'北京'},{name:'烟台'}],
                                        [{name:'北京'},{name:'盐城'}],
                                        [{name:'北京'},{name:'珠海'}],
                                        [{name:'上海'},{name:'包头'}],
                                        [{name:'上海'},{name:'北海'}],
                                        [{name:'上海'},{name:'广州'}],
                                        [{name:'上海'},{name:'郑州'}],
                                        [{name:'上海'},{name:'长春'}],
                                        [{name:'上海'},{name:'重庆'}],
                                        [{name:'上海'},{name:'长沙'}],
                                        [{name:'上海'},{name:'成都'}],
                                        [{name:'上海'},{name:'丹东'}],
                                        [{name:'上海'},{name:'大连'}],
                                        [{name:'上海'},{name:'福州'}],
                                        [{name:'上海'},{name:'海口'}],
                                        [{name:'上海'},{name:'呼和浩特'}],
                                        [{name:'上海'},{name:'合肥'}],
                                        [{name:'上海'},{name:'哈尔滨'}],
                                        [{name:'上海'},{name:'舟山'}],
                                        [{name:'上海'},{name:'银川'}],
                                        [{name:'上海'},{name:'南昌'}],
                                        [{name:'上海'},{name:'昆明'}],
                                        [{name:'上海'},{name:'贵阳'}],
                                        [{name:'上海'},{name:'兰州'}],
                                        [{name:'上海'},{name:'拉萨'}],
                                        [{name:'上海'},{name:'连云港'}],
                                        [{name:'上海'},{name:'临沂'}],
                                        [{name:'上海'},{name:'柳州'}],
                                        [{name:'上海'},{name:'宁波'}],
                                        [{name:'上海'},{name:'南宁'}],
                                        [{name:'上海'},{name:'北京'}],
                                        [{name:'上海'},{name:'沈阳'}],
                                        [{name:'上海'},{name:'秦皇岛'}],
                                        [{name:'上海'},{name:'西安'}],
                                        [{name:'上海'},{name:'石家庄'}],
                                        [{name:'上海'},{name:'汕头'}],
                                        [{name:'上海'},{name:'深圳'}],
                                        [{name:'上海'},{name:'青岛'}],
                                        [{name:'上海'},{name:'济南'}],
                                        [{name:'上海'},{name:'天津'}],
                                        [{name:'上海'},{name:'太原'}],
                                        [{name:'上海'},{name:'乌鲁木齐'}],
                                        [{name:'上海'},{name:'潍坊'}],
                                        [{name:'上海'},{name:'威海'}],
                                        [{name:'上海'},{name:'温州'}],
                                        [{name:'上海'},{name:'武汉'}],
                                        [{name:'上海'},{name:'厦门'}],
                                        [{name:'上海'},{name:'西宁'}],
                                        [{name:'上海'},{name:'徐州'}],
                                        [{name:'上海'},{name:'烟台'}],
                                        [{name:'上海'},{name:'珠海'}],
                                        [{name:'广州'},{name:'北海'}],
                                        [{name:'广州'},{name:'郑州'}],
                                        [{name:'广州'},{name:'长春'}],
                                        [{name:'广州'},{name:'重庆'}],
                                        [{name:'广州'},{name:'长沙'}],
                                        [{name:'广州'},{name:'成都'}],
                                        [{name:'广州'},{name:'常州'}],
                                        [{name:'广州'},{name:'大连'}],
                                        [{name:'广州'},{name:'福州'}],
                                        [{name:'广州'},{name:'海口'}],
                                        [{name:'广州'},{name:'呼和浩特'}],
                                        [{name:'广州'},{name:'合肥'}],
                                        [{name:'广州'},{name:'杭州'}],
                                        [{name:'广州'},{name:'哈尔滨'}],
                                        [{name:'广州'},{name:'舟山'}],
                                        [{name:'广州'},{name:'银川'}],
                                        [{name:'广州'},{name:'南昌'}],
                                        [{name:'广州'},{name:'昆明'}],
                                        [{name:'广州'},{name:'贵阳'}],
                                        [{name:'广州'},{name:'兰州'}],
                                        [{name:'广州'},{name:'拉萨'}],
                                        [{name:'广州'},{name:'连云港'}],
                                        [{name:'广州'},{name:'临沂'}],
                                        [{name:'广州'},{name:'柳州'}],
                                        [{name:'广州'},{name:'宁波'}],
                                        [{name:'广州'},{name:'南京'}],
                                        [{name:'广州'},{name:'南宁'}],
                                        [{name:'广州'},{name:'南通'}],
                                        [{name:'广州'},{name:'北京'}],
                                        [{name:'广州'},{name:'上海'}],
                                        [{name:'广州'},{name:'沈阳'}],
                                        [{name:'广州'},{name:'西安'}],
                                        [{name:'广州'},{name:'石家庄'}],
                                        [{name:'广州'},{name:'汕头'}],
                                        [{name:'广州'},{name:'青岛'}],
                                        [{name:'广州'},{name:'济南'}],
                                        [{name:'广州'},{name:'天津'}],
                                        [{name:'广州'},{name:'太原'}],
                                        [{name:'广州'},{name:'乌鲁木齐'}],
                                        [{name:'广州'},{name:'温州'}],
                                        [{name:'广州'},{name:'武汉'}],
                                        [{name:'广州'},{name:'无锡'}],
                                        [{name:'广州'},{name:'厦门'}],
                                        [{name:'广州'},{name:'西宁'}],
                                        [{name:'广州'},{name:'徐州'}],
                                        [{name:'广州'},{name:'烟台'}],
                                        [{name:'广州'},{name:'盐城'}]
                                    ]
                                },
                                geoCoord: {
                                    '上海': [121.4648,31.2891],
                                    '东莞': [113.8953,22.901],
                                    '东营': [118.7073,37.5513],
                                    '中山': [113.4229,22.478],
                                    '临汾': [111.4783,36.1615],
                                    '临沂': [118.3118,35.2936],
                                    '丹东': [124.541,40.4242],
                                    '丽水': [119.5642,28.1854],
                                    '乌鲁木齐': [87.9236,43.5883],
                                    '佛山': [112.8955,23.1097],
                                    '保定': [115.0488,39.0948],
                                    '兰州': [103.5901,36.3043],
                                    '包头': [110.3467,41.4899],
                                    '北京': [116.4551,40.2539],
                                    '北海': [109.314,21.6211],
                                    '南京': [118.8062,31.9208],
                                    '南宁': [108.479,23.1152],
                                    '南昌': [116.0046,28.6633],
                                    '南通': [121.1023,32.1625],
                                    '厦门': [118.1689,24.6478],
                                    '台州': [121.1353,28.6688],
                                    '合肥': [117.29,32.0581],
                                    '呼和浩特': [111.4124,40.4901],
                                    '咸阳': [108.4131,34.8706],
                                    '哈尔滨': [127.9688,45.368],
                                    '唐山': [118.4766,39.6826],
                                    '嘉兴': [120.9155,30.6354],
                                    '大同': [113.7854,39.8035],
                                    '大连': [122.2229,39.4409],
                                    '天津': [117.4219,39.4189],
                                    '太原': [112.3352,37.9413],
                                    '威海': [121.9482,37.1393],
                                    '宁波': [121.5967,29.6466],
                                    '宝鸡': [107.1826,34.3433],
                                    '宿迁': [118.5535,33.7775],
                                    '常州': [119.4543,31.5582],
                                    '广州': [113.5107,23.2196],
                                    '廊坊': [116.521,39.0509],
                                    '延安': [109.1052,36.4252],
                                    '张家口': [115.1477,40.8527],
                                    '徐州': [117.5208,34.3268],
                                    '德州': [116.6858,37.2107],
                                    '惠州': [114.6204,23.1647],
                                    '成都': [103.9526,30.7617],
                                    '扬州': [119.4653,32.8162],
                                    '承德': [117.5757,41.4075],
                                    '拉萨': [91.1865,30.1465],
                                    '无锡': [120.3442,31.5527],
                                    '日照': [119.2786,35.5023],
                                    '昆明': [102.9199,25.4663],
                                    '杭州': [119.5313,29.8773],
                                    '枣庄': [117.323,34.8926],
                                    '柳州': [109.3799,24.9774],
                                    '株洲': [113.5327,27.0319],
                                    '武汉': [114.3896,30.6628],
                                    '汕头': [117.1692,23.3405],
                                    '江门': [112.6318,22.1484],
                                    '沈阳': [123.1238,42.1216],
                                    '沧州': [116.8286,38.2104],
                                    '河源': [114.917,23.9722],
                                    '泉州': [118.3228,25.1147],
                                    '泰安': [117.0264,36.0516],
                                    '泰州': [120.0586,32.5525],
                                    '济南': [117.1582,36.8701],
                                    '济宁': [116.8286,35.3375],
                                    '海口': [110.3893,19.8516],
                                    '淄博': [118.0371,36.6064],
                                    '淮安': [118.927,33.4039],
                                    '深圳': [114.5435,22.5439],
                                    '清远': [112.9175,24.3292],
                                    '温州': [120.498,27.8119],
                                    '渭南': [109.7864,35.0299],
                                    '湖州': [119.8608,30.7782],
                                    '湘潭': [112.5439,27.7075],
                                    '滨州': [117.8174,37.4963],
                                    '潍坊': [119.0918,36.524],
                                    '烟台': [120.7397,37.5128],
                                    '玉溪': [101.9312,23.8898],
                                    '珠海': [113.7305,22.1155],
                                    '盐城': [120.2234,33.5577],
                                    '盘锦': [121.9482,41.0449],
                                    '石家庄': [114.4995,38.1006],
                                    '福州': [119.4543,25.9222],
                                    '秦皇岛': [119.2126,40.0232],
                                    '绍兴': [120.564,29.7565],
                                    '聊城': [115.9167,36.4032],
                                    '肇庆': [112.1265,23.5822],
                                    '舟山': [122.2559,30.2234],
                                    '苏州': [120.6519,31.3989],
                                    '莱芜': [117.6526,36.2714],
                                    '菏泽': [115.6201,35.2057],
                                    '营口': [122.4316,40.4297],
                                    '葫芦岛': [120.1575,40.578],
                                    '衡水': [115.8838,37.7161],
                                    '衢州': [118.6853,28.8666],
                                    '西宁': [101.4038,36.8207],
                                    '西安': [109.1162,34.2004],
                                    '贵阳': [106.6992,26.7682],
                                    '连云港': [119.1248,34.552],
                                    '邢台': [114.8071,37.2821],
                                    '邯郸': [114.4775,36.535],
                                    '郑州': [113.4668,34.6234],
                                    '鄂尔多斯': [108.9734,39.2487],
                                    '重庆': [107.7539,30.1904],
                                    '金华': [120.0037,29.1028],
                                    '铜川': [109.0393,35.1947],
                                    '银川': [106.3586,38.1775],
                                    '镇江': [119.4763,31.9702],
                                    '长春': [125.8154,44.2584],
                                    '长沙': [113.0823,28.2568],
                                    '长治': [112.8625,36.4746],
                                    '阳泉': [113.4778,38.0951],
                                    '青岛': [120.4651,36.3373],
                                    '韶关': [113.7964,24.7028]
                                }
                            },
                            {
                                name: '成都数据抓取',
                                type: 'map',
                                mapType: 'china',
                                data:[],
                                markLine : {
                                    smooth:true,
                                    effect : {
                                        show: true,
                                        scaleSize: 1,
                                        period: 30,
                                        color: '#fff',
                                        shadowBlur: 10
                                    },
                                    itemStyle : {
                                        normal: {
                                            borderWidth:1,
                                            lineStyle: {
                                                type: 'solid',
                                                shadowBlur: 10
                                            }
                                        }
                                    },
                                    data :line
                                },
                                markPoint : {
                                    symbol:'emptyCircle',
                                    symbolSize : function (v){
                                        return 10 + v/1000
                                    },
                                    effect : {
                                        show: true,
                                        shadowBlur : 0
                                    },
                                    itemStyle:{
                                        normal:{
                                            label:{show:false}
                                        },
                                        emphasis: {
                                            label:{position:'top'}
                                        }
                                    },
                                    data :newValue
                                }
                            }
                            //,
                            //{
                            //    name: '上海 Top10',
                            //    type: 'map',
                            //    mapType: 'china',
                            //    data:[],
                            //    markLine : {
                            //        smooth:true,
                            //        effect : {
                            //            show: true,
                            //            scaleSize: 1,
                            //            period: 30,
                            //            color: '#fff',
                            //            shadowBlur: 10
                            //        },
                            //        itemStyle : {
                            //            normal: {
                            //                borderWidth:1,
                            //                lineStyle: {
                            //                    type: 'solid',
                            //                    shadowBlur: 10
                            //                }
                            //            }
                            //        },
                            //        data : [
                            //            [{name:'上海'},{name:'包头',value:95}],
                            //            [{name:'上海'},{name:'昆明',value:90}],
                            //            [{name:'上海'},{name:'广州',value:80}],
                            //            [{name:'上海'},{name:'郑州',value:70}],
                            //            [{name:'上海'},{name:'长春',value:60}],
                            //            [{name:'上海'},{name:'重庆',value:50}],
                            //            [{name:'上海'},{name:'长沙',value:40}],
                            //            [{name:'上海'},{name:'北京',value:30}],
                            //            [{name:'上海'},{name:'丹东',value:20}],
                            //            [{name:'上海'},{name:'大连',value:10}]
                            //        ]
                            //    },
                            //    markPoint : {
                            //        symbol:'emptyCircle',
                            //        symbolSize : function (v){
                            //            return 10 + v/10
                            //        },
                            //        effect : {
                            //            show: true,
                            //            shadowBlur : 0
                            //        },
                            //        itemStyle:{
                            //            normal:{
                            //                label:{show:false}
                            //            },
                            //            emphasis: {
                            //                label:{position:'top'}
                            //            }
                            //        },
                            //        data : [
                            //            {name:'包头',value:95},
                            //            {name:'昆明',value:90},
                            //            {name:'广州',value:80},
                            //            {name:'郑州',value:70},
                            //            {name:'长春',value:60},
                            //            {name:'重庆',value:50},
                            //            {name:'长沙',value:40},
                            //            {name:'北京',value:30},
                            //            {name:'丹东',value:20},
                            //            {name:'大连',value:10}
                            //        ]
                            //    }
                            //},
                            //{
                            //    name: '广州 Top10',
                            //    type: 'map',
                            //    mapType: 'china',
                            //    data:[],
                            //    markLine : {
                            //        smooth:true,
                            //        effect : {
                            //            show: true,
                            //            scaleSize: 1,
                            //            period: 30,
                            //            color: '#fff',
                            //            shadowBlur: 10
                            //        },
                            //        itemStyle : {
                            //            normal: {
                            //                borderWidth:1,
                            //                lineStyle: {
                            //                    type: 'solid',
                            //                    shadowBlur: 10
                            //                }
                            //            }
                            //        },
                            //        data : [
                            //            [{name:'广州'},{name:'福州',value:95}],
                            //            [{name:'广州'},{name:'太原',value:90}],
                            //            [{name:'广州'},{name:'长春',value:80}],
                            //            [{name:'广州'},{name:'重庆',value:70}],
                            //            [{name:'广州'},{name:'西安',value:60}],
                            //            [{name:'广州'},{name:'成都',value:50}],
                            //            [{name:'广州'},{name:'常州',value:40}],
                            //            [{name:'广州'},{name:'北京',value:30}],
                            //            [{name:'广州'},{name:'北海',value:20}],
                            //            [{name:'广州'},{name:'海口',value:10}]
                            //        ]
                            //    },
                            //    markPoint : {
                            //        symbol:'emptyCircle',
                            //        symbolSize : function (v){
                            //            return 10 + v/10
                            //        },
                            //        effect : {
                            //            show: true,
                            //            shadowBlur : 0
                            //        },
                            //        itemStyle:{
                            //            normal:{
                            //                label:{show:false}
                            //            },
                            //            emphasis: {
                            //                label:{position:'top'}
                            //            }
                            //        },
                            //        data : [
                            //            {name:'福州',value:95},
                            //            {name:'太原',value:90},
                            //            {name:'长春',value:80},
                            //            {name:'重庆',value:70},
                            //            {name:'西安',value:60},
                            //            {name:'成都',value:50},
                            //            {name:'常州',value:40},
                            //            {name:'北京',value:30},
                            //            {name:'北海',value:20},
                            //            {name:'海口',value:10}
                            //        ]
                            //    }
                            //}
                        ]
                    };

                    return option;
                }
            }
        };
    }
]);

app.directive("placeBorkenline", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {

                require(
                    [
                        'echarts',
                        'echarts/chart/line'
                    ],
                    function(ec) {
                        scope.$watch('hourDetail', function(newValue, oldValue, scope) {
                            if(newValue)ec.init(tEle[0]).setOption(getOption(newValue));
                        });
                    });

                //生成echarts配置
                function getOption(item) {
                    var option = {
                        color: ['#258efd', '#666666'],
                        tooltip: {
                            trigger: 'axis'
                        },
                        title: {
                            text: item.name,
                            x: 100,
                            y: 15,
                            textStyle: {
                                color: '#FFFFFF'
                            }
                        },
                        grid: {
                            borderWidth: 0
                        },
                        legend: {
                            data: ['今天', '昨天'],
                            y: 20,
                            textStyle: {
                                color: '#FFFFFF',
                                fontSize: '14'
                            }
                        },
                        calculable: true,
                        xAxis: [{
                            type: 'category',
                            boundaryGap: false,
                            axisLabel: {
                                textStyle: {
                                    color: '#FFFFFF',
                                    fontSize: '14'
                                }
                            },
                            splitLine: {
                                show: false
                            },
                            axisTick: {
                                show: false
                            },
                            data: item.cloumn
                        }],
                        yAxis: [{
                            type: 'value',
                            boundaryGap: [0, 1],
                            axisLabel: {
                                textStyle: {
                                    color: '#FFFFFF'
                                }
                            },
                            splitLine: {
                                show: false
                            }
                        }],
                        series: [{
                            name: '今天',
                            type: 'line',
                            data: item.today,
                            smooth: true,
                            itemStyle: {
                                normal: {
                                    areaStyle: {
                                        type: 'default'
                                    },
                                    label: {
                                        show: true,
                                        position: 'top'
                                    }
                                }
                            },

                            markLine: {
                                itemStyle: {
                                    normal: {
                                        color: '#F37D64'
                                    }
                                },
                                data: [
                                    [{
                                        name: '标线1起点',
                                        value: item.cordon,
                                        xAxis: item.cloumn[0],
                                        yAxis: item.cordon
                                    }, {
                                        name: '标线1终点',
                                        xAxis: item.cloumn[item.cloumn.length-1],
                                        yAxis: item.cordon
                                    }]
                                ]
                            }
                        }, {
                            name: '昨天',
                            type: 'line',
                            data: item.yes,
                            smooth: true,
                            itemStyle: {
                                normal: {
                                    areaStyle: {
                                        type: 'default'
                                    },
                                    label: {
                                        show: true,
                                        position: 'top'
                                    }
                                }
                            }
                        }]
                    };
                    return option;
                }



            }
        };
    }
]);
app.directive("placeRounds", ['$http', 'M_API', 'timer',
    function($http, M_API, timer) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {
                var pies = []; //圆环对象数组
                var echarts = []; //echars对象数组
                var tData = [];
                var cycle = 1; //下一个循环显示圆环对象下标
                var maxLength = 10; //圆环总数

                require(
                    [
                        'echarts',
                        'echarts/chart/pie'
                    ],
                    function(ec) {
                        $http.post(M_API.base + M_API.placeList)
                            .success(function(data) {
                                tData = data;
                                maxLength = data.length < 10 ? data.length : 10;
                                for (var i = 0; i < 10 && i < data.length; i++) {
                                    pies[i] = angular.element('<div class="place__rounds--item"></div>').data('id', data[i].id);
                                    tEle.append(pies[i]);
                                    makePie(i, ec, data[i], true);
                                    if (0 === i) {
                                        scope[tAttrs.placeRounds](data[i].id, data[i].name);
                                    }
                                }
                                cycleList(ec);
                            });
                    });

                //循环刷新圆环
                function cycleList(ec) {
                    var id = pies[cycle].data('id');
                    var prev = cycle - 1;
                    if (0 > prev) {
                        prev = pies.length - 1;
                    }
                    timer(function() {
                        $http.post(M_API.base + M_API.placeList, {
                                id: id
                            })
                            .success(function(data) {
                                tData[cycle] = data;
                                makePie(cycle, ec, data, false);
                                scope[tAttrs.placeRounds](id, tData[cycle].name);
                                if (++cycle >= maxLength) {
                                    cycle = 0;
                                }
                                cycleList(ec);
                            });
                    }, 5000, 'placeList');
                }

                //构造圆环
                function makePie(i, ec, item, isInit) {
                    var prev = i - 1;
                    if (0 > prev) {
                        prev = pies.length - 1;
                    }
                    if (isInit) {
                        timer(_make, 300 * i, 'makePlacePie');
                    } else {
                        _make(true);
                    }

                    function _make(isActive) {
                        var label = angular.element('<div class="place__rounds--label"><h1>' + item.name + '</h1><h2>' + item.sum + '</h2><div class="post"><i></i>' + item.postNum + '</div><div class="replay"><i></i>' + item.replyNum + '</div></div>');

                        if (isActive && echarts[prev]) {
                            echarts[prev].setOption({
                                color: ['#1660B1', '#07ABA6'],
                                animation: false,
                                series: [{
                                    radius: ['47%', '62%']
                                }]
                            }).restore();
                            var prevLabel = pies[prev][0].getElementsByClassName('place__rounds--label')[0];
                            prevLabel.className = prevLabel.className.replace('now', '');
                            label.addClass('now');
                        }
                        echarts[i] = ec.init(pies[i][0]).setOption(getOption({
                            postNum: item.postNum,
                            replyNum: item.replyNum
                        }, isActive));
                        pies[i].append(label);
                        timer(function() {
                            label.addClass('active');
                        }, 300, 'placeDelay');
                    }
                }

                //生成echarts圆环配置
                function getOption(item, isActive) {
                    var color = ['#1660B1', '#07ABA6'];
                    var radius = ['47%', '62%'];
                    if (isActive) {
                        color[0] = '#017BFF';
                        color[1] = '#02E0F7';
                        radius[0] = '57%';
                        radius[1] = '72%';
                    }
                    var dataStyle = {
                        normal: {
                            label: {
                                show: false
                            },
                            labelLine: {
                                show: false
                            }
                        }
                    };
                    var placeHolderStyle = {
                        normal: {
                            color: 'rgba(0,0,0,0)',
                            label: {
                                show: false
                            },
                            labelLine: {
                                show: false
                            }
                        },
                        emphasis: {
                            color: 'rgba(0,0,0,0)'
                        }
                    };

                    var option = {
                        color: color,
                        tooltip: {
                            show: false
                        },
                        legend: {
                            orient: 'vertical',
                            show: false,
                            x: 'center',
                            y: '210',
                            itemGap: 10,
                            textStyle: {
                                color: 'auto'
                            },
                            data: [
                                item.replyNum + '(' + getPercent(item.replyNum, item.sum) + ')',
                                item.postNum + '(' + getPercent(item.postNum, item.sum) + ')'
                            ]
                        },
                        series: [{
                            name: '1',
                            type: 'pie',
                            clockWise: false,
                            radius: radius,
                            itemStyle: dataStyle,
                            data: [{
                                value: item.replyNum,
                                name: item.replyNum + '(' + getPercent(item.replyNum, item.sum) + ')'
                            }, {
                                value: item.postNum,
                                name: item.postNum + '(' + getPercent(item.postNum, item.sum) + ')'
                            }]
                        }]
                    };
                    return option;
                }


                function getPercent(num, total) {
                    num = parseFloat(num);
                    total = parseFloat(total);
                    if (isNaN(num) || isNaN(total)) {
                        return "-";
                    }
                    return total <= 0 ? "0%" : (Math.round(num / total * 10000) / 100.00 + "%");
                }
            }
        };
    }
]);
//言论趋势(近30天归口趋势)
app.directive("speechPlot", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {


                //堆积折线图
                require(
                    [
                        'echarts',
                        'echarts/chart/line'
                    ],
                    function (ec) {
                        scope.$watch('speechPlot', function(newValue, oldValue, scope) {
                            //console.log(newValue);
                            if(newValue){
                                ec.init(document.getElementById('speech__stackPlot--content')).setOption(getOption(newValue));
                            }
                        });
                    }
                );

                function getOption(newValue){
                    //var myChart = ec.init(document.getElementById('speech__stackPlot--content'));
                    var item=newValue;
                    //console.log(item);
                    var dates=[];//日期
                    var dateValues=[];//日期对应的值
                    //求取出数组数据的长度
                    function getJsonObjLength(jsonObj) {
                        var Length = 0;
                        for (var date in jsonObj) {
                            Length++;
                        }
                        return Length;
                    }
                    var dataPairLength=getJsonObjLength(item[0].dataPair);

                    var colorList=['#194547','#7fc79a','#f4e5c1','#f17a65','#f93c1a'];
                    for(var i=0;i<dataPairLength;i++){
                        dates.push(item[0].dataPair[i].date);
                    }
                    var legend=[];
                    for(var k=0;k<item.length;k++){
                        legend.push({name:item[k].type});
                    }
                    var option = {
                        tooltip : {
                            trigger: 'axis',
                            textStyle: {color:'#000000',
                                fontSize:14},
                            borderRadius:'2',
                            borderColor:'#45c9d8',
                            borderWidth:'0',
                            backgroundColor:'rgba(255,255,255,0.85)',
                            axisPointer:{
                                lineStyle:{
                                    width:'1',
                                    color:'#ffffff'
                                }
                            },
                            formatter:function(params, ticket, callback){
                                //console.log(params);
                                var res = params[0].name;
                                for (var i = 0, l = params.length; i < l; i++) {
                                    res += '<br/>' + params[i].seriesName + ' : ' + params[i].value;
                                }
                                //setTimeout(function (){
                                //    // 仅为了模拟异步回调
                                //    callback(ticket, res);
                                //}, 1000);
                                return res;
                            }
                        },
                        legend: {
                            orient: 'vertical', // 'vertical'
                            x: '20', // 'center' | 'left' | {number},
                            y: 'center', // 'center' | 'bottom' | {number}
                            //itemWidth:'10',
                            borderColor: 'rgba(178,34,34,0.8)',
                            borderWidth: 0,
                            padding: 10,    // [5, 10, 15, 20]
                            itemGap: 20,
                            textStyle: {color: 'auto'},
                            data: legend
                        },
                        grid:{
                            borderWidth:'0',
                            x:150
                        },

                        xAxis : [
                            {
                                splitLine:{show:false},
                                axisLine:{
                                    lineStyle:{
                                        color:'#ffffff',
                                        width:'1'
                                    }
                                },
                                type : 'category',
                                boundaryGap : false,
                                axisLabel : {
                                    show : true,
                                    interval:0,
                                    textStyle : {
                                        color : '#ffffff'
                                    }
                                },
                                data : dates
                            }
                        ],

                        yAxis : [
                            {
                                splitLine:{show:false},
                                axisLine:{show:false},
                                axisLabel : {
                                    show : true,
                                    textStyle : {
                                        color : '#ffffff'
                                    }
                                },
                                type : 'value'
                            }
                        ],

                        series:function(){
                            var serie=[];
                            for(var i=0;i < item.length;i++){
                                var value1 = item[i].dataPair;
                                var value2 = [];
                                for(var j=0;j<dataPairLength;j++){
                                    value2.push(value1[j].value);
                                }
                                var items={
                                    name:item[i].type,
                                    type:'line',
                                    symbol:'circle',
                                    data:value2,
                                    itemStyle: {normal: {color:colorList[i],lineStyle:{
                                        width:'1'
                                    }}}

                                };
                                serie.push(items);
                            }
                            return serie;
                        }()
                    };
                    return option;
                }
            }
        };
    }
]);

//言论趋势(总体归口趋势)
app.directive("speechDate", ['$http', 'M_API',
    function($http, M_API) {
        return {
            restrict: 'A',
            link: function(scope, tEle, tAttrs, transcludeFn) {


                //堆积折线图
                require(
                    [
                        'echarts',
                        'echarts/chart/line'
                    ],
                    function (ec) {
                        scope.$watch('speechDate', function(newValue, oldValue, scope) {
                            //console.log(newValue);
                            if(newValue){
                                ec.init(document.getElementById('speech__DateBox--content')).setOption(getOption(newValue));
                            }
                        });
                    }
                );

                function getOption(newValue){
                    var temp=newValue;
                    var dates=[];//日期
                    var dateValues=[];//日期对应的值
                    //求取出数组数据的长度
                    function getJsonObjLength(jsonObj) {
                        var Length = 0;
                        for (var date in jsonObj) {
                            Length++;
                        }
                        return Length;
                    }
                    var dataPairLength=getJsonObjLength(temp[0].dataPair);

                    for(var i=0;i<dataPairLength;i++){
                        dates.push(temp[0].dataPair[i].date);
                    }
                    var colorList=['#1665b3','#424d52'];
                    var legend=[];
                    for(var k=0;k<temp.length;k++){
                        legend.push({name:temp[k].type});
                    }
                    var option = {
                        tooltip : {
                            trigger: 'axis',
                            textStyle: {color:'#000000',
                                fontSize:14},
                            borderRadius:'2',
                            borderColor:'#45c9d8',
                            borderWidth:'0',
                            backgroundColor:'rgba(255,255,255,0.85)',
                            axisPointer:{
                                lineStyle:{
                                    width:'1',
                                    color:'#ffffff'
                                }
                            },
                            formatter:function(params, ticket, callback){
                                //console.log(params);
                                var res = params[0].name+'时';
                                for (var i = 0, l = params.length; i < l; i++) {
                                    res += '<br/>' + params[i].seriesName + ' : ' + params[i].value;
                                }
                                //setTimeout(function (){
                                //    // 仅为了模拟异步回调
                                //    callback(ticket, res);
                                //}, 1000);
                                return res;
                            }
                        },
                        legend: {
                            orient: 'vertical', // 'vertical'
                            x: '20', // 'center' | 'left' | {number},
                            y: 'center', // 'center' | 'bottom' | {number}
                            //itemWidth:'10',
                            borderColor: 'rgba(178,34,34,0.8)',
                            borderWidth: 0,
                            padding: 10,    // [5, 10, 15, 20]
                            itemGap: 20,
                            textStyle: {color: 'auto'},
                            data: legend
                        },
                        grid:{
                            borderWidth:'0',
                            x:150
                        },

                        xAxis : [
                            {
                                splitLine:{show:false},
                                name:'时',
                                nameLocation:'end',
                                axisLine:{
                                    lineStyle:{
                                        color:'#ffffff',
                                        width:'1'
                                    }
                                },
                                type : 'category',
                                boundaryGap : false,
                                axisLabel : {
                                    show : true,
                                    interval:0,
                                    textStyle : {
                                        color : '#ffffff'
                                    }
                                },
                                data :dates
                            }
                        ],

                        yAxis : [
                            {
                                splitLine:{show:false},
                                axisLine:{show:false},
                                axisLabel : {
                                    show : true,
                                    textStyle : {
                                        color : '#ffffff'
                                    }
                                },
                                type : 'value'
                            }
                        ],
                        series:function(){
                            var serie=[];
                            for(var i=0;i < temp.length;i++){
                                var value1 = temp[i].dataPair;
                                var value2 = [];
                                for(var j=0;j<dataPairLength;j++){
                                    value2.push(value1[j].value);
                                }
                                var items={
                                    name:temp[i].type,
                                    type:'line',
                                    symbol:'circle',
                                    data:value2,
                                    itemStyle: {normal: {color:colorList[i],lineStyle:{
                                        width:'1'
                                    }}}

                                };
                                serie.push(items);
                            }
                            return serie;
                        }()
                    };
                    return option;
                }
            }
        };
    }
]);
/**
 * 近期关键字dom指令
 */

app.directive('words', ['$timeout', function($timeout) {
    "use strict";
    return {
        restrict: 'A',
        link: function(scope, ele, attrs, transclude) {
            require(
                [
                    "zrender",
                    "zrender/animation/animation",
                    'zrender/shape/Circle',
                    'zrender/tool/area'
                ],
                function(zrender, Animation, CircleShape, area) {
                    var zr = zrender.init(ele[0]); // 初始化zrender
                    var r = [50, 100, 150]; //球体等级半径
                    var rFontSize = ['14px', '24px', '36px'];
                    var width = Math.ceil(zr.getWidth());
                    var height = Math.ceil(zr.getHeight());
                    var sport = 1; //运动基数
                    var colors = [ //颜色组
                        {
                            r: 223,
                            g: 210,
                            b: 148
                        }, {
                            r: 209,
                            g: 170,
                            b: 155
                        }, {
                            r: 243,
                            g: 181,
                            b: 158
                        }, {
                            r: 149,
                            g: 190,
                            b: 206
                        }, {
                            r: 10,
                            g: 97,
                            b: 128
                        }, {
                            r: 105,
                            g: 143,
                            b: 158
                        }, {
                            r: 242,
                            g: 156,
                            b: 155
                        }, {
                            r: 155,
                            g: 118,
                            b: 104
                        }, {
                            r: 185,
                            g: 164,
                            b: 164
                        }, {
                            r: 9,
                            g: 93,
                            b: 122
                        }, {
                            r: 159,
                            g: 223,
                            b: 248
                        }
                    ];
                    var colorTmp = _.clone(colors); //临时存放颜色组
                    var n = 20; //球体个数
                    var circles = []; //球体组
                    var data = []; //模拟数据


                    //zr.render(animation);
                    zr.render();


                    scope.$watch('data', function(newVal, oldVal) {
                        if (newVal) {
                            newVal = angular.fromJson(newVal);
                            data = levelChange(newVal);
                            if (data)
                                initCircle();
                        }
                    });

                    //数据级别转换
                    function levelChange(val) {
                        if (0 === val.length) return false;
                        change(val[0], 2);
                        for (var i = 1; i < 6 && i < val.length; i++) {
                            change(val[i], 1);
                        }

                        for (var j = 6; j < val.length; j++) {
                            change(val[j], 0);
                        }
                        return val;

                        function change(v, l) {
                            v.num = v.level;
                            v.level = l;
                            if (v.name.length > 8) {
                                v.name = v.name.substr(0, 8);
                            }
                        }
                    }


                    function animation() {
                        setInterval(
                            function() {
                                var style;
                                for (var i = 0; i < circles.length; i++) {
                                    style = circles[i].style;


                                    circles[i].style.x += circles[i]._animationX;
                                    circles[i].style.y += circles[i]._animationY;

                                    //画布边界判定
                                    if (circles[i].style.x >= width - circles[i].style.r) {
                                        circles[i].style.x = width - circles[i].style.r;
                                        circles[i]._animationX = -circles[i]._animationX;
                                    }

                                    if (circles[i].style.x <= circles[i].style.r) {
                                        circles[i].style.x = circles[i].style.r;
                                        circles[i]._animationX = -circles[i]._animationX;
                                    }

                                    if (circles[i].style.y >= height - circles[i].style.r) {
                                        circles[i].style.y = height - circles[i].style.r;
                                        circles[i]._animationY = -circles[i]._animationY;
                                    }
                                    if (circles[i].style.y <= circles[i].style.r) {
                                        circles[i].style.y = circles[i].style.r;
                                        circles[i]._animationY = -circles[i]._animationY;
                                    }

                                    //球体边界碰撞
                                    for (var j = 0; j < circles.length; j++) {
                                        if (j !== i) {
                                            if (Math.round(Math.pow(circles[i].style.x - circles[j].style.x, 2) +
                                                    Math.pow(circles[i].style.y - circles[j].style.y, 2)) <=
                                                Math.round(Math.pow((circles[i].style.r * 0.7) + (circles[j].style.r * 0.7), 2))) {

                                                if (0 === circles[i]._animationX || 0 === circles[i]._animationY) {
                                                    circles[i]._animationX = Math.ceil(Math.random() * sport);
                                                    circles[i]._animationY = Math.ceil(Math.random() * sport);
                                                }
                                                if (0 === circles[j]._animationX || 0 === circles[j]._animationY) {
                                                    circles[j]._animationX = Math.ceil(Math.random() * sport);
                                                    circles[j]._animationY = Math.ceil(Math.random() * sport);
                                                }
                                                var tempX = circles[i]._animationX;
                                                var tempY = circles[i]._animationY;
                                                circles[i]._animationX = circles[j]._animationX;
                                                circles[j]._animationX = tempX;
                                                circles[i]._animationY = circles[j]._animationY;
                                                circles[j]._animationY = tempY;
                                                //circles[i]._animationX = -circles[i]._animationX;
                                                //circles[j]._animationX = -circles[j]._animationX;
                                                //circles[i]._animationY = -circles[i]._animationY;
                                                //circles[j]._animationY = -circles[j]._animationY;
                                            }
                                        }
                                    }

                                    zr.modShape(circles[i].id, circles[i]);
                                }
                                zr.refresh();
                            },
                            50
                        );
                    }

                    //新球体坐标生成
                    function initXY(r) {
                        var x = Math.ceil(Math.random() * (width - (r * 2))) + r; //x轴取值区间
                        var y = Math.ceil(Math.random() * (height - (r * 2))) + r; //y轴取值区间
                        var isEmpty = true;
                        for (var i = 0; i < circles.length; i++) {
                            if (Math.round(Math.pow(x - circles[i].style.x, 2) +
                                    Math.pow(y - circles[i].style.y, 2)) <=
                                Math.round(Math.pow(r * 0.7 + circles[i].style.r * 0.7, 2))) {
                                isEmpty = false;
                                break;
                            }
                        }
                        if (isEmpty) {
                            return {
                                x: x,
                                y: y
                            };
                        } else {
                            return initXY(r);
                        }
                    }

                    //圆形初始化
                    function initCircle() {
                        if (circles.length == n) {
                            var tmpCircle = circles.shift();
                            zr.animate(tmpCircle.id, "style")
                                .when(1, {
                                    textColor: 'rgba(255, 255, 255, 0)'
                                })
                                .when(1000, {
                                    r: 0
                                }).done(function() {
                                    zr.delShape(tmpCircle.id);
                                    zr.refresh();

                                }).start();
                        }
                        var index = circles.length;
                        var tData = data.shift();

                        var level = tData.level; //球体级别


                        var coordinates = initXY(r[level]);

                        var nColor = Math.ceil(Math.random() * (colorTmp.length - 1)); //随机颜色下标
                        var rgb = [colorTmp[nColor].r, colorTmp[nColor].g, colorTmp[nColor].b];
                        colorTmp.splice(nColor, 1);
                        if (0 === colorTmp.length) colorTmp = _.clone(colors);

                        circles[index] = new CircleShape({
                            style: {
                                x: coordinates.x,
                                y: coordinates.y,
                                r: +r[level],
                                brushType: 'fill',
                                color: 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', 1)',
                                text: tData.name,
                                textFont: rFontSize[level] + ' Microsoft YaHei',
                                textColor: 'rgba(255, 255, 255, 0)',
                                textPosition: 'inside'

                            },
                            _animationX: 0,
                            _animationY: 0,
                            hoverable: false
                        });

                        zr.addShape(circles[index]);
                        zr.refresh();
                        zr.animate(circles[index].id, "style")
                            .when(600, {
                                r: r[level] * 1.5,
                                color: 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', 0.05)'
                            }).when(700, {
                                r: r[level] * 0.95,
                                color: 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', 0.6)',
                                textColor: 'rgba(255, 255, 255, 0)'
                            }).when(900, {
                                r: r[level],
                                color: 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', 0.5)',
                                textColor: 'rgba(255, 255, 255, 1)'
                            }).done(function() {
                                if (0 === circles[index]._animationX || 0 === circles[index]._animationY) {
                                    circles[index]._animationX = Math.ceil(Math.random() * sport);
                                    circles[index]._animationY = Math.ceil(Math.random() * sport);
                                }



                            })
                            .start();
                        $timeout(function() {
                            if (data.length > 0)
                                initCircle();
                        }, 300);
                    }
                });
        }
    };
}]);